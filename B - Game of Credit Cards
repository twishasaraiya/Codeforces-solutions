PROBLEM:http://codeforces.com/contest/777/problem/B

HINT:777B - Game of Credit Cards
First we want to consider a strategy that minimizes the amount of flicks Moriarty will receive from Sherlock. This is similar to loosing as few rounds as possible. He can use digit 0 can be used to not loose against digit 0, digit 1 to not loose against digits 0 and 1 and so on. Thus, Moriarty should try all digits from 0 to 9 and greedily apply them to Sherlock's digits they can beat. If the maximum number of rounds Moriarty can not loose is a the answer for the first question is n - a.

For the second question we need to count the maximum number of rounds Moriarty can win. Now digit 0 is useless, digit 1 wins against digit 0, digit 2 wins against digits 0 and 1, and so on. Thus, Moriarty should consider his digits from 0 to 9 and greedily use them to digits they can beat.

SOLUTION:
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<set>
#include<map>
#include<stack>
#include<stdio.h>
using namespace std;

int main()
{
  int n,i,j;
  cin>>n;
  char m[1005],s[1005];
  scanf("%s %s",s,m);
  int numM[10]={0},numS[10]={0};
  for(i=0;i<n;i++){
  numM[m[i]-'0']++;
  numS[s[i]-'0']++;
  }
  int minM=0;
  for(i=0;i<10;i++)
  {
    if(numM[i]>0)
    {
      for(j=i;j>=0 && numM[i]>0;)
      {
        if(numS[j]==0)
        j--;
        else
        {
          minM++;
          numS[j]--;
          numM[i]--;
        }
      }
    }
  }
  minM=n-minM;
  memset(numS,0,sizeof(numS));
  memset(numM,0,sizeof(numM));
  for(i=0;i<n;i++){
  numM[m[i]-'0']++;
  numS[s[i]-'0']++;
  }
  int maxS=0;
  for(i=0;i<10;i++)
  {
    if(numS[i]>0)
    {
      for(j=i+1;j<10 && numS[i]>0;)
      {
        if(numM[j]==0)
        j++;
        else
        {
          maxS++;
          numM[j]--;
          numS[i]--;
        }
      }
    }
  }
  cout<<minM<<endl<<maxS<<endl;
  return 0;
}
