PROBLEM:http://codeforces.com/problemset/problem/580/C

TAGS:  dfs and similar      trees

SOLUTION:
#include<iostream>
#include<string>
#include<bits/stdc++.h>
#include<algorithm>
#include<math.h>
#include<vector>
#define ll long long
using namespace std;
//const ll mod=1000000007;
vector<int> adj[200000];
int cats[200000];
int n,m;

int dfs(int v,int p,int cats_seen){
    /*cout << "Exploring: " << v+1 << endl;
    cout << cats_seen << endl;*/
    if(cats_seen>m)
        return 0;
    if(adj[v].size()==1 && adj[v][0]==p && cats_seen<=m)
        return 1;
    int sum=0;
    for(int i=0;i<adj[v].size();i++){
        int has_cat=cats[adj[v][i]];
        if(adj[v][i]!=p)
        {
            sum+=dfs(adj[v][i],v,has_cat?(has_cat+cats_seen):0);
        }
    }
    return sum;
}

int main(){
    cin>>n>>m;
    int i,x,y;
    for(i=0;i<n;i++)
        cin>>cats[i];
    for(i=0;i<n-1;i++){
        cin>>x>>y;
        adj[x-1].push_back(y-1);
        adj[y-1].push_back(x-1);
    }
    int ans=dfs(0,-1,cats[0]?1:0);
    cout<<ans<<endl;
    return 0;
}
