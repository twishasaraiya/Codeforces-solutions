Maximum sum increasing subsequence
   Hide Topic Tags  Array   Dynamic-Programming      Amazon    Morgan-Stanley
Given an array of n positive integers. Write a program to find the sum of maximum sum subsequence of the given array such that the integers in the subsequence are sorted in increasing order.

Input:

The first line of input contains an integer T denoting the number of test cases.
The first line of each test case is N,N is the size of array.
The second line of each test case contains N input A[].

Output:

Print the sum of maximum sum sequence of the given array.

Constraints:

1 ≤ T ≤ 100
1 ≤ N ≤ 100
1 ≤ A[] ≤ 1000

Example:

Input:
2
7
1 101 2 3 100 4 5
4
10 5 4 3

Output:
106
10

Explanation:
For input:
7
1 101 2 3 100 4 5
All the increasing subsequences : (1,101); (1,2,3,100); (1,2,3,4,5), out of this (1,2,3,100) has maximum sum,i.e., 106. Hence the output is stated as 106.

SOLUTION:
#include <iostream>
#include<algorithm>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    int a[n],i,j;
	    for(i=0;i<n;i++)
	        cin>>a[i];
	    int dp[n];
	    for(i=0;i<n;i++)
	        dp[i]=a[i];
	   for(i=1;i<n;i++){
	       for(j=0;j<i;j++){
	           if(a[i]>a[j] && dp[i]<dp[j]+a[i])
	                dp[i]=dp[j]+a[i];
	       }
	   }
	   int m=0;
	   for(i=0;i<n;i++)
	    m=max(m,dp[i]);
	   printf("%d\n",m);
	}
	return 0;
}
