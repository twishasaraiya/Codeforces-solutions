Find total number of Squares in a N*N cheesboard.

Input:

The first line contains an integer T, depicting total number of test cases. 
Then following T lines contains an integer N that is the side of the chessboard.


Output:

Each seperate line showing the maximum number of squares possible.


Constraints:

1 ≤ T ≤ 100
1 ≤ N ≤ 100
 

Example:

Input :

2
1
2

Output :

1
5


EDITORIAL

Number of 1*1 squares in a chessboard are : n*n 

Now if we try to find number of 2*2 squares the length and breadth both will reduce by 1 . so (n-1)*(n-1)

.
.
.
Similarly for n*n there is only 1 square possible the chessboard itself. 

So answer will be simply summation of these that is n*n + (n-1)*(n-1) +. . . .  . . . + 1*1

which is equal to (n*(n+1)*(2*n+1))/6



SOLUTION
#include <iostream>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    int ans=(n*(n+1)*(2*n+1))/6;
	    cout<<ans<<endl;
	}
	return 0;
}
