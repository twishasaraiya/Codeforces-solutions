#include<iostream>
#include<cstring>
using namespace std;

int max( int a , int b ){
    
    return (a>b)?a:b;
        
}

int main(){
    
    int n,a;
    long long dp[100005];
    long long cnt[100005];
    cin>>n;
 
    memset(cnt,0,sizeof(cnt));
    
    for( int i = 0 ; i < n ; i++ ){
         
         cin>>a;     
         cnt[a]++;
         
    }
    
    dp[0] = 0;
    dp[1] = cnt[1];
    
    
    for( int i = 2 ; i <= 100000 ; i++ )
         dp[i] = max( dp[i-1] , (dp[i-2] + (1LL*i*cnt[i])) ); 
         
    
    cout<<dp[100000];
    return 0;
        
}
Tutorial for Boredom -

In this task we need to maximize the sum of numbers that we took. Let precalc array cnt. cnt[x] — number of integers x in array a. Now we can easily calculate the DP:
f(i) = max(f(i - 1), f(i - 2) + cnt[i]·i), 2 ≤ i ≤ n;
f(1) = cnt[1];
f(0) = 0;
The answer is f(n).
Asymptotics — O(n).

You can proceed with making a code for it if you got an idea of what is to be done. If not, don't worry just read on. 

Solving BOREDOM - 

Okay, so let us start will analyzing the input given to us - 
The input given is - 
n (an integer value denoting the number of numbers in Alex's sequence)
a1,a2,...an (the n numbers in the sequence)
The first thoughts that could come to your mind may be - We should choose the maximum number of the array first and then the second max out of the remaining. Let's see if that is a correct approach to be followed-
Eg, Consider the third sample test case given above - 
9
1 2 1 3 2 2 2 2 3
Here, if we choose the maximum element of the array i.e. 3(let us say we choose the last 3) then,
points = 3
array becomes => 1 - 1 3 - - - - - ( "-" denotes deleted element) (all the 2's present in the array are deleted as per the problem statement)
Now, delete 3 again
points = 3+3 = 6
array becomes => 1-1------
proceeding similarly, the total points you could make this way = 3+3+1+1 = 8

On the other hand, if you chose 2(any one of the five  2's) to be the first element to be deleted. let us say we delete the first 2 in the array, then as per the problem statement all 1's and 3's are deleted. 
points => 2
array becomes => - - - - 2 2 2 2 -
and proceeding this way and deleting 2's from the array one by one we get..
points = 2+2+2+2+2 = 10
which is greater than what we got when we deleted 3 in the beginning.
So, we need another dynamic programming solution to it -
What we start doing is that, we maintain an array cnt[] which holds the count of each element present in the array. So that, cnt[i] gives the number of times i appears in the input array.
Why do we need it - As shown in the counter example above it may be beneficial to delete the element which appears more number of times than just the one whose value is maximum. Though, we will take care of both the cases.
Initialise the cnt[] array with zeroes. Since we do not know which elements would be used in the array, we cannot declare a size for the count array. But we know that 1 ≤ ai ≤ 105
So, we the size of cnt[] is taken as 10^5. So that, we can store the count of any possible array element that is input to us. 
At any point in time, we see that if we choose an element "x" to be deleted then the maximum you can select after it is "x-2", since all elements with value x-1 and x+1 are deleted. So, at any point in time you either choose "x" to be deleted or choose "x-1" to be deleted. Considering "x" is the maximum element available in the array at that point in time.
So, the points 
points on deleting x = max( points you get on deleting x-1 , (points you get on deleting x-2) + cnt[x] * x )
